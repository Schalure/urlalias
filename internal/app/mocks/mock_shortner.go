// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Schalure/urlalias/internal/app/handlers (interfaces: Shortner)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockShortner is a mock of Shortner interface.
type MockShortner struct {
	ctrl     *gomock.Controller
	recorder *MockShortnerMockRecorder
}

// MockShortnerMockRecorder is the mock recorder for MockShortner.
type MockShortnerMockRecorder struct {
	mock *MockShortner
}

// NewMockShortner creates a new mock instance.
func NewMockShortner(ctrl *gomock.Controller) *MockShortner {
	mock := &MockShortner{ctrl: ctrl}
	mock.recorder = &MockShortnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortner) EXPECT() *MockShortnerMockRecorder {
	return m.recorder
}

// AddAliasesToDelete mocks base method.
func (m *MockShortner) AddAliasesToDelete(arg0 context.Context, arg1 uint64, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAliasesToDelete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAliasesToDelete indicates an expected call of AddAliasesToDelete.
func (mr *MockShortnerMockRecorder) AddAliasesToDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAliasesToDelete", reflect.TypeOf((*MockShortner)(nil).AddAliasesToDelete), varargs...)
}

// GetBatchShortURL mocks base method.
func (m *MockShortner) GetBatchShortURL(arg0 context.Context, arg1 uint64, arg2 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchShortURL", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchShortURL indicates an expected call of GetBatchShortURL.
func (mr *MockShortnerMockRecorder) GetBatchShortURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchShortURL", reflect.TypeOf((*MockShortner)(nil).GetBatchShortURL), arg0, arg1, arg2)
}

// GetOriginalURL mocks base method.
func (m *MockShortner) GetOriginalURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURL indicates an expected call of GetOriginalURL.
func (mr *MockShortnerMockRecorder) GetOriginalURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockShortner)(nil).GetOriginalURL), arg0, arg1)
}

// GetShortKey mocks base method.
func (m *MockShortner) GetShortKey(arg0 context.Context, arg1 uint64, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortKey indicates an expected call of GetShortKey.
func (mr *MockShortnerMockRecorder) GetShortKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortKey", reflect.TypeOf((*MockShortner)(nil).GetShortKey), arg0, arg1, arg2)
}

// IsDatabaseActive mocks base method.
func (m *MockShortner) IsDatabaseActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDatabaseActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDatabaseActive indicates an expected call of IsDatabaseActive.
func (mr *MockShortnerMockRecorder) IsDatabaseActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDatabaseActive", reflect.TypeOf((*MockShortner)(nil).IsDatabaseActive))
}
