// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Schalure/urlalias/internal/app/handlers (interfaces: UserManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	aliasentity "github.com/Schalure/urlalias/internal/app/models/aliasentity"
	gomock "github.com/golang/mock/gomock"
)

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserManager) CreateUser() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserManagerMockRecorder) CreateUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserManager)(nil).CreateUser))
}

// GetUserAliases mocks base method.
func (m *MockUserManager) GetUserAliases(arg0 context.Context, arg1 uint64) ([]aliasentity.AliasURLModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAliases", arg0, arg1)
	ret0, _ := ret[0].([]aliasentity.AliasURLModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAliases indicates an expected call of GetUserAliases.
func (mr *MockUserManagerMockRecorder) GetUserAliases(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAliases", reflect.TypeOf((*MockUserManager)(nil).GetUserAliases), arg0, arg1)
}
